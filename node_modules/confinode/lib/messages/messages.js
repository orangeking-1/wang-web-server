"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * All the messages of the library.
 */
exports.messages = {
    allLoadersFailed: (errors) => `All loaders failed:\n${errors
        .map(([loader, error]) => ` * ${loader !== null && loader !== void 0 ? loader : '(unknown)'}: ${error}`)
        .join('\n')}`,
    badExtends: () => `Extended files parameter is not properly formatted`,
    emptyConfiguration: () => 'Empty configuration',
    expected: (entry, file, expected) => `Configuration error: “${entry}” is expected to be ${expected.toString()}\n in file “${file}”`,
    expectedArray: () => 'an array',
    expectedBoolean: () => 'a boolean',
    expectedChoice: (choices) => `one of: ${choices.join(', ')}`,
    expectedNumber: () => 'a number',
    expectedObject: () => 'an object',
    expectedString: () => 'a string',
    fileNotFound: (file) => `Configuration file “${file}” not found`,
    internalError: /* istanbul ignore next */ (message) => `Internal error: ${message}`,
    loadedFromCache: () => 'Loaded from cache',
    loadedConfiguration: (file) => `Loaded configuration from file ${file}`,
    loadingFile: (file) => `Loading file ${file}`,
    usingLoader: (loader) => `Using ${loader} loader`,
    missingMandatory: (entry) => `Configuration error: missing mandatory “${entry}” option`,
    multipleFiles: (path) => `Multiple configuration files found for “${path}.*”`,
    noLoaderFound: (file) => `No appropriate loader found for file ${file}`,
    recursion: (files) => `Recursion in configuration files:\n${files.join('\n  --> ')}`,
    searchInFolder: (folder) => `Search for configuration in ${folder}`,
};
//# sourceMappingURL=messages.js.map